//LABEL(MotherDiagnosis, EN) Determines when an infected mother becomes diagnosed

/* NOTE(MotherDiagnosis, EN)
	This module schedules and implements the event that transitions a mother
	from the infected or symptomatic states into the diagnosed state. This transition competes
	with the transitions into the death state. A switch allows one to choose between a
	transition based on an exponential rate or a transition based on a percentage.

	- Data requirements

	For each of the two transitions, the following must be specified: The value of the switch
	that indicates which transition type to use. The exponential rate and the percentage of
	mothers that becomes diagnosed by the transition.

	- Implementation details

	The exponential transitions are implemented by drawing a number of a random uniform
	distribution and then transforming that number into a random draw from an exponential
	distribution.

	The percentage based transitions are implemented by first finding the time at which the
	mother will leave the state due to death or becoming symptomatic. A number is then drawn
	from a random uniform distribution so that a percentage that matches the input parameter
	will become diagnosed before the mother exits the state.
*/

parameters
{
	double InfectedDiagnosisMotherRate; //EN Diagnosis Rate of Infected Mothers
	double SymptomaticDiagnosisMotherRate; //EN Diagnosis Rate of Symptomatic Mothers
	double InfectedDiagnosisTransitionMotherSwitch; //EN A switch allowing to choose which transition to use for diagnosis of asymptomatic mothers
	double InfectedDiagnosisMotherPercentage[MORT_TIME]; //EN The percentage of asymptomatic mothers who become diagnosed
	double SymptomaticDiagnosisTransitionMotherSwitch; //EN A switch allowing to choose which transition to use for diagnosis of symptomatic mothers
	double SymptomaticDiagnosisMotherPercentage[MORT_TIME]; //EN The percentage of symptomatic mothers who become diagnosed
};

parameter_group Mother_Diagnosis
{
InfectedDiagnosisMotherRate,
SymptomaticDiagnosisMotherRate,
InfectedDiagnosisTransitionMotherSwitch,
InfectedDiagnosisMotherPercentage,
SymptomaticDiagnosisTransitionMotherSwitch,
SymptomaticDiagnosisMotherPercentage
};

/* NOTE(InfectedDiagnosisMotherRate, EN)
    An exponential rate at which mothers become diagnosed
	after becoming infected.
*/

/* NOTE(SymptomaticDiagnosisMotherRate, EN)
    An exponential rate at which mothers become diagnosed
	after becoming symptomatic.
*/

/* NOTE (InfectedDiagnosisTransitionMotherSwitch, EN)
	This switch allows one to choose between scheduling diagnosis of an asymptomatic mother based on a weibull 
	curve from the time since eligibility or based on the percentage of mothers that gets diagnosed while asymptomatic
	Setting this value to zero will use the weibull rate.
	Setting this value to one will use the percentage based approach.
*/

/* NOTE (InfectedDiagnosisMotherPercentage, EN)
	The percentage of asymptomatic mothers who become diagnosed. A percentage can be specified for each model year
*/

/* NOTE (SymptomaticDiagnosisTransitionMotherSwitch, EN)
	This switch allows one to choose between scheduling diagnosis of an symptomatic mother based on a weibull 
	curve from the time since eligibility or based on the percentage of mothers that gets diagnosed while symptomatic
	Setting this value to zero will use the weibull rate.
	Setting this value to one will use the percentage based approach.
*/

/* NOTE (SymptomaticDiagnosisMotherPercentage, EN)
	The percentage of symptomatic mothers who become diagnosed. A percentage can be specified for each model year
*/

actor Mother
{
	logical diagnosed = {FALSE};

	event timeDiagnosisEvent, diagnosisEvent;
};

TIME Mother::timeDiagnosisEvent()
{
	TIME t_event_time = TIME_INFINITE;
	// Without symptoms
	if (mdeath_sched_status == mdsINFECTED && diagnosed == FALSE && showing_symptoms == FALSE)
	{
		if (InfectedDiagnosisTransitionMotherSwitch == 0){
			t_event_time = log(RandUniform(9)) / -InfectedDiagnosisMotherRate;
		//	t_event_time = WAIT(t_event_time);
		} else {
			double exit_date = min(min(infected_death_time, infected_symptoms_time), 100);

			t_event_time = ((RandUniform(14) * (exit_date - age_at_infection)) / InfectedDiagnosisMotherPercentage[ModelTime]);
		}
	}

	// With Symptoms
	if (mdeath_sched_status == mdsINFECTED && diagnosed == FALSE && showing_symptoms == TRUE)
	{
		if (SymptomaticDiagnosisTransitionMotherSwitch == 0){
			t_event_time = log(RandUniform(10)) / -SymptomaticDiagnosisMotherRate;
			//t_event_time = WAIT(t_event_time);
		} else {
			double exit_date = min(infected_death_time, 100);

			t_event_time = ((RandUniform(15) * (exit_date - age_at_symptoms)) / SymptomaticDiagnosisMotherPercentage[ModelTime]);
			//t_event_time = age_at_symptoms + ((RandUniform(15) * (exit_date - age_at_symptoms)) / SymptomaticDiagnosisMotherPercentage[ModelTime]);
		}
	}
	t_event_time = WAIT(t_event_time);
	return(t_event_time);
};

void Mother::diagnosisEvent()
{
	diagnosed = TRUE;
	if (mdetailed_status == mdSYMPTOMS)
	{
		mdetailed_status = mdDIAGSYMP;
	} else {
		mdetailed_status = mdDIAGNOSED;
	};
	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Diagnose();
	}
};