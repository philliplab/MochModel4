//LABEL(MotherFertility, EN) Schedules and implements births

/* NOTE(MotherFertility, EN)
	This module schedules and implements births. A mother can give
	birth at any age, where the provided fertility rates are greater
	than zero, and from any of the disease states other than the death state.

	- Data requirements

	A vector of fertility rates must be provided specifying the fertility at each age between 0 and 100. 
	
	The ferility rates are adjusted for a number of factors. These adjustments are applied by 
	multiplying the fertility rates by factors specifying the size of the adjustment needed.
	Factors must be specified for socioeconomic status, disease state, and parity.

	- Implementation Details

	Fertility is implemented in two different events. First a mother must become fertile and then the
	mother can have a child. After having a child, a mother becomes infertile for a period. This period
	is controlled by the FertilityMotherGestationPeriod parameter. However, 
	the mother can give birth immediately upon becoming fertile. This implies that the gestation
	period is included in the period of 'infertility' immediately after giving birth.

	Upon becoming fertile, a birth event is scheduled. A curve, S(t), depicting the probability of not
	giving birth is constructed for the subject. The curve is constructed by setting the 
	probability of not giving birth equal to 1 at the moment of becoming fertile. The value of 
	the curve  one year later is then set to S(1) = S(0) * (1 - fert[age + 1] * multipliers)
	where fert is the vector of fertility rates for mothers, age is the age at which the mother
	became fertile, the multipliers are factors that
	adjusts a mothers fertility based on various factors.
	A straight line is then used to connect
	S(0) to S(1). Similarly S(2) = S(1) * (1 - fert[age + 2] * parity_multiplier * disease_state_multiplier).
	Again a straight line is used to connect S(1) to S(2). This process is continued until the value of the
	survival curve reached 0. 
	
	To assign a time of the next birth using this curve, the following is done:
	A random uniform number is drawn for a mother. This random number is
	placed on the y axis of the curve and the age of the next birth is read off from the x-axis.

	Upon giving birth, a child actor is creator and initialized. A link is created
	between the mother and child. The mother is made infertile and 'become fertile' event is
	scheduled for one year later.
*/

link Child.lMother Mother.mlChild[];

parameters 
{
	double FertilityMotherSESMultipliers[SOCIO_ECONOMIC_STATE]; //EN Effect of socioeconomic state on fertility
	double FertilityMotherParityMultipliers[PARITY]; //EN Effect of parity on fertility
	double FertilityMotherRates[LIFE]; //EN The base fertility rates
	double FertilityMotherDiseaseMultipliers[MDETAILED_STATE]; //EN Effect of disease state on fertility
	double FertilityMotherGestationPeriod; //EN Period of infertility after childbirth.
};

parameter_group Mother_Fertility
{
  FertilityMotherSESMultipliers,
  FertilityMotherParityMultipliers,
  FertilityMotherRates,
  FertilityMotherDiseaseMultipliers,
  FertilityMotherGestationPeriod
};

/* NOTE( FertilityMotherSESMultipliers, EN)
	Multipliers that affect a mother's fertility based on her socioeconomic status.
*/

/* NOTE( FertilityMotherParityMultipliers, EN)
	Multipliers that affect a mother's fertility based on her parity.
*/

/* NOTE( FertilityMotherDiseaseMultipliers, EN)
	Multipliers that affect a mother's fertility based on her disease state.
*/

/* NOTE( FertilityMotherRates, EN)
	For each year of life, the probability that a mother will have a child in that year.
*/

/* NOTE( FertilityMotherGestationPeriod, EN)
	The period of time after childbirth that a mother is infertile. Set this to at least 9 months. Note the 
	slight mismatch with reality in which this should come before childbirth. However, allowing this
	period to come after childbirth simplifies the implementation.
*/

range PARITY
{
	0,15
};
/* NOTE (PARITY, EN)
    The range of valid parity values for a mother.
	It is assumed that no mother can have more than 15 children.
*/

actor Mother            //EN Individual
{
	PARITY number_children = {0};
	logical fertile = {FALSE};
	TIME time_to_next_birth_scheduling = {0};
	TIME time_to_next_birth = {0};

	event timeBirthSchedEvent, BirthSchedEvent;
	event timeBirthEvent, BirthEvent;
};

TIME Mother::timeBirthSchedEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (fertile == FALSE)
	{
		tEventTime = time_to_next_birth_scheduling;
	};
	tEventTime = WAIT(tEventTime);
	return(tEventTime);
};

double next_birth_time(int curr_age, MDETAILED_STATE curr_disease_status, double prev_birth_time_of_year, PARITY number_children, SOCIO_ECONOMIC_STATE ses)
{
	double x = RandUniform(17);
	double not_birth_prob = 1;
	double prev_not_birth_prob = 1;
	double wait_time = pow(10, 10);
	int indx = -1;
	if (prev_birth_time_of_year > 0.5)
	{
		curr_age++;
	};
	while ((curr_age + indx <= 50) && not_birth_prob > x)
	{
		indx++;
		prev_not_birth_prob = not_birth_prob;
		double curr_fert = FertilityMotherRates[curr_age + indx] * FertilityMotherDiseaseMultipliers[curr_disease_status] * FertilityMotherParityMultipliers[number_children] * FertilityMotherSESMultipliers[ses];
		//double curr_fert = FertilityRates[curr_age + indx]*DiseaseFertMultipliers[curr_disease_status]*ParityFertMultipliers[number_children_internal];
		if (curr_fert > 1){ curr_fert = 1; };
		if (curr_fert < 0){ curr_fert = 0; };
		not_birth_prob = not_birth_prob * (1-curr_fert);
	}
	if (not_birth_prob <= x){
		x = x - not_birth_prob;
		double interpolation_step_size = x / (prev_not_birth_prob - not_birth_prob);
	    wait_time = indx + interpolation_step_size;
	};
	wait_time = wait_time + prev_birth_time_of_year;
//	double wait_time = 30;
	return(wait_time);
};

void Mother::BirthSchedEvent()
{
	fertile = TRUE;
	time_to_next_birth = next_birth_time(integer_age, mdetailed_status, age - integer_age, number_children, ses);
}

TIME Mother::timeBirthEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (fertile == TRUE){
		tEventTime = time_to_next_birth;
	}
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::BirthEvent()
{
	number_children++;

	fertile = FALSE;
	time_to_next_birth_scheduling = FertilityMotherGestationPeriod;

	Child *prChild = new Child();
	mlChild->Add(prChild);
	prChild->Start();
	prChild->Set_Mother_Age_And_SES(age, ses);
//	if (disease_status == INFECTED){
//		prChild->Mother_Infect();
//	}
};