//LABEL(MotherMortality, EN) Mortality functions for Mothers

/* NOTE(MotherMortality, EN)
	This module contains all the mortality functions for the mothers. There
	are three different types of mortality implemented:

	- Mortality for Healthy Mothers
	- Mortality for Infected Mothers
	- Mortality for Treated Mothers
	- Mortality for Mothers who stopped treatment

	Mortality for Healthy Mothers

	- Data requirements

    The q[x,y] values (probability of dying between ages x and x+1 given that you
	survived until age x in the year y) by gender and time (model year). These
	mortality rates must exclude mortality due to HIV. 

	- Implementation Details

	Using the mortality data, a survival curve S(a) is constructed for each mother.
	Since death from the healthy state is only scheduled at the birth of the
	mother, and all the mothers are assumed to be born simultaneously, all
	mothers have exactly the same survival curve.

	The curve is constructed by setting the survival probability equal to 1
	at age 0. The value of the survival curve at age 1 is then set to
	S(1) = S(0) * (1 - qstar[0,y]). Similarly S2) = S(1) * (1 - qstar[1, y]).
	A straight line was then used to connect
	S(0) to S(1). Where y is the value of ModelTime and qstar[x,y] is q[x,y] 
	value is multiplied by HealthyMortalityMotherMultiplier.
	This process was continued until the value of the
	survival curve reached 0. 
	
	To assign a time of death using this curve, the following is done:
	A random uniform number is drawn for a mother. This random number is
	placed on the y axis of the survival curve and the age of death
	is read off from the x-axis.

	The actual implementation is a slight optimization of the above process.
	The random uniform number is draw first and the curve is then constructed
	until the value of the curve reaches the randomly drawn number.

	Mortality for Infected Mothers

	- Data requirements

	The shape and scale for the weibull distribution whose CDF the survival curve is based on.
	Furthermore, the surival is grouped in different age groups. For each age group, the
	scale parameter is multiplied by a factor. This shifts the survival curve to the
	right for younger mothers and to the left for older mothers.

	- Implementation Details

	The survival function is of the form: S(t) = (lambda) * pow(-log(t), 1/kappa) where
	lambda is the scale parameter and kappa is the shape parameter and t is the time since infection.
	Note that this is just 1 - the CDF of a weibull distribution.

	Furthermore, to accomodate different age groups, the lamba parameter is multiplied by a factor 
	called phi. Each of the different age groups used in the Van der Paal article must be given
	a phi value.

	To assign a time of death using this curve, the following is done:
	A random uniform number is drawn for a mother. This random number is
	placed on the y axis of the survival curve and the age of death
	is read off from the x-axis.

	A special note about the use of the phi factor. The Van der Paal article only provides survival
	estimates for ages > 13. To ease the implementation, the first entry of the phi parameter corresponds
	to ages smaller than or equal to 13. This value must always be 1000. This is a special marker
	that will instruct the function to not assign a death date to people younger than 13.
	Future versions of the model should include a better implemenation of this mechanism. 

	- Not implemented yet
*/

range MORT_LIFE //EN Mortality Life Range
{
	0,91
};

/* NOTE(MORT_LIFE, EN)
    The range of ages that the mortality data spans.
	This conforms to the data specifications of the
	2008 ASSA model.
*/

range MORT_TIME //EN ASSA model Time Range
{
	0,40
};

/* NOTE(MORT_TIME, EN)
    The time range for the mortality and incidence source data.
	The original source for this data is the
	2008 ASSA model's black population. This model was
	designed for a time span of 40 years.
*/

parameters
{
	double HIVFreeMortality[GENDER][MORT_LIFE][MORT_TIME]; //EN HIV-Free Mortality
	/* NOTE (HIVFreeMortality, EN)
		The q[x,y] values (probability of dying between ages x and x+1 given that you
		survived until age x in the year y) for the population being modelled by gender 
		and time (model year).
	*/

	double HealthyMortalityMotherMultiplier; //EN Multiplier for Mortality of Healthy Mothers
	/* NOTE (HealthyMortalityMotherMultiplier, EN)
		A multiplier that allows finer control for testing and model exploration.
	*/

	double InfectedMortalityMotherMultiplier; //EN Multiplier for Mortality of Infected Mothers
	/* NOTE (InfectedMortalityMotherMultiplier, EN)
		A multiplier that allows finer control for testing and model exploration.
	*/

	double TreatedMortalityMotherb6m; //EN Probability of dying within 6 months of starting treatment
	double TreatedMortalityMothera6m; //EN Annual Probability of dying after 6 months of starting treatment
	double TreatedMortalityMotherMultiplier; //EN Multiplier for Mortality of Treated Mothers

	double MInfectedMortShape; //EN Infected Mother Survival Curve Shape - kappa
	/* NOTE (MInfectedMortShape, EN)
		The shape parameter for the Infected mother's survival curve
	*/

	double MInfectedMortScale; //EN Infected Mother Survival Curve Scale - lambda
	/* NOTE (MInfectedMortScale, EN)
		The scale parameter for Infected mother's survival curve
	*/
	
	double MInfectedMortPhi[VAN_DER_PAAL_INDX]; //EN Infected Mother Survival Curve Age Modifier - phi
	/* NOTE (MInfectedMortPhi, EN)
		To accomodate different age groups, the scale parameter is multiplied by a this number. 
		Each of the different age groups used in the Van der Paal article must have an entry in
		this parameter.
	*/

	double MInfectionImmortalityPeriod; //EN Length of Period of immortality immediately after infection
	/* NOTE(MInfectionImmortalityPeriod, EN)
		The number of years a mother is immortal immediately after infection.
		This is required to make the HealthyMortalityMotherMultiplier work.
		This should be an extremely small number.
	*/
};


parameter_group Mother_Mortality
{ //EN Mothers' Mortality Parameters
	MInfectedMortShape, MInfectedMortScale, MInfectedMortPhi
};

actor Mother            //EN Individual
{
	MDEATH_SCHED_STATE mother_mds_status_at_death = {mdsHEALTHY};
	MDETAILED_STATE mother_md_status_at_death = {mdHEALTHY};

	event timeMortalityEvent, MortalityEvent;	//EN Mortality event
};

double invWeibull(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

double lifeTableDraw(double x)
{
	if (HealthyMortalityMotherMultiplier <= 0){
		return(1000*1000);
	};
	// Old code that allowed model time to vary commented out
	// Consider implementing the feature again in the future
	int indx = -1;
	double prev_lx = 1;
	double lx = 1;
	//int time_indx = 0;
	while (x <= lx)
	{
		indx++;
//		time_indx = indx > 40 ? 40 : indx;
		prev_lx = lx;
//		lx = prev_lx * (1-HIVFreeMortality[F][indx][time_indx]);
		lx = prev_lx * (1-HIVFreeMortality[F][indx][ModelTime] * HealthyMortalityMotherMultiplier);
	};
	if (indx == -1){
		indx = 0;
	}; // Small correction for when mother dies between ages 0 and 1.
	return(indx + ((x - lx) / (prev_lx - lx)));
};

double healthyMortalityTime(double draw){
    return(lifeTableDraw(draw));
};

double infectedMortalityTime(double y, double kappa, double lambda, double phi){
	TIME t_event_time = TIME_INFINITE;
	if (InfectedMortalityMotherMultiplier > 0){
		t_event_time = 0;
		while (t_event_time <= MInfectionImmortalityPeriod){
			t_event_time = invWeibull(y, kappa, lambda, phi) / InfectedMortalityMotherMultiplier;
		};
	};
	return(t_event_time);
};

double treatedMortalityTime(double y){
	TIME t_event_time = TIME_INFINITE;
	if (y > (1 - TreatedMortalityMotherb6m)){
		t_event_time = -log(y) / (2 * TreatedMortalityMotherb6m);
	} else {
		t_event_time = -log(y) / (TreatedMortalityMothera6m);
	}
	if (TreatedMortalityMotherMultiplier > 0){
		t_event_time = t_event_time / TreatedMortalityMotherMultiplier;
	} else {
		t_event_time = TIME_INFINITE;
	}
	return(t_event_time);
};

// The time function of MortalityEvent
TIME Mother::timeMortalityEvent()
{
	TIME t_event_time = TIME_INFINITE;

	switch(mdeath_sched_status){
	case mdsHEALTHY: {t_event_time = WAIT(healthyMortalityTime(RandUniform(4)));} break;
	case mdsINFECTED: {t_event_time = WAIT(infectedMortalityTime(inf_mortality_draw, MInfectedMortShape, MInfectedMortScale, MInfectedMortPhi[vdp_age_at_infection]));} break;
	case mdsTREATED: {t_event_time = WAIT(treatedMortalityTime(RandUniform(8)));} break;
	case mdsSTOPPED: {t_event_time = WAIT(3);} break;
	default: {t_event_time = WAIT(100);} break;
	}

	return t_event_time;
}

// The implement function of MortalityEvent
void Mother::MortalityEvent()
{
	mother_mds_status_at_death = mdeath_sched_status;
	mdeath_sched_status = mdsDEAD;
	mother_md_status_at_death = mdetailed_status;
	mdetailed_status = mdDEAD;
	alive = FALSE;

	// Remove the actor from the simulation.
	Finish();
}