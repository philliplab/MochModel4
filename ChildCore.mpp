//LABEL(ChildCore, EN) The Child Actor

/* NOTE(ChildCore, EN)
	The core functionality of the child actor.

	The main contents of this module is all the functions that the mother's events can call to
	set attributes on the children. Each transition a mother can go through changes her status.
	This status is pushed down onto the child actors using the methods defined in this module
*/

parameters 
{
	double GenderChildFemaleProportion; //EN The proportion of children that are female
	CHILD_MODEL_TYPE ChildModelType; //EN The Type of Child Model
};

classification CHILD_MODEL_TYPE
{
	SCHOOLING,
	RISK_FACTORS
};

parameter_group Child_Core
{
	GenderChildFemaleProportion,
	ChildModelType
};


range DEPRESSION_YEARS
{
	12, 18
};

/* NOTE( DEPRESSION_YEARS, EN)
    A child can only become depressed and/or abused from the day the child 
	turns 12 until the day before the child turns 19.
*/

actor_set Child asAllChild; //EN All Child actors

actor Child            //EN Individual
{
	SOCIO_ECONOMIC_STATE ses = {LOW}; //EN Socioeconomic Status
	REPORT_TIME report_time;
	GENDER gender;
	LIFE integer_age = self_scheduling_int(age); //EN Integer Age
	logical alive = {TRUE};
	double mother_age_at_birth = {0}; //EN The age of the mother at her child's birth

	MDEATH_SCHED_STATE mdeath_sched_status = {mdsHEALTHY};
	MDETAILED_STATE mdetailed_status = {mdHEALTHY};
	CHILD_SCHED_STATE child_sched_status = {cHEALTHY};
	logical mother_showing_symptoms = {FALSE};
	logical mother_diagnosed = {FALSE};

	void Set_Child_Start_Parameters(double m_age, SOCIO_ECONOMIC_STATE m_ses, MDEATH_SCHED_STATE m_mdeath_sched_status, MDETAILED_STATE m_mdetailed_status, CHILD_SCHED_STATE m_mchild_sched_status);
	void Mother_Die();
	void Mother_Infect();
	void Mother_Treat();
	void Mother_Stop();
	void Mother_Symptoms();
	void Mother_Diagnose();
	void Start();
	void Finish();
};

void Child::Set_Child_Start_Parameters(double m_age, SOCIO_ECONOMIC_STATE m_ses, MDEATH_SCHED_STATE m_mdeath_sched_status, MDETAILED_STATE m_mdetailed_status, CHILD_SCHED_STATE m_mchild_sched_status)
{
	mother_age_at_birth = m_age;
	ses = m_ses;
	mdeath_sched_status = m_mdeath_sched_status;
	mdetailed_status = m_mdetailed_status;
	child_sched_status = m_mchild_sched_status;
};

void Child::Mother_Die()
{
	mdeath_sched_status = mdsDEAD;
	mdetailed_status = mdDEAD;
	child_sched_status = cDEAD;
};

void Child::Mother_Infect()
{
	mdeath_sched_status = mdsINFECTED;
	mdetailed_status = mdINFECTED;
	child_sched_status = cINFECTED;
};

void Child::Mother_Treat()
{
	mdeath_sched_status = mdsTREATED;
	mdetailed_status = mdTREATED;
	mother_showing_symptoms = FALSE;
	child_sched_status = cTREATED;
};

void Child::Mother_Stop()
{
	mdeath_sched_status = mdsSTOPPED;
	mdetailed_status = mdSTOPPED;
	mother_showing_symptoms = TRUE;
	child_sched_status = cTREATED;
};

void Child::Mother_Symptoms()
{
	if (mother_diagnosed == TRUE){
		mdetailed_status = mdDIAGSYMP;
	} else {
		mdetailed_status = mdSYMPTOMS;
	};
	mother_showing_symptoms = TRUE;
	child_sched_status = cSYMPTOMS;
};

void Child::Mother_Diagnose()
{
	if (mother_showing_symptoms == TRUE){
		mdetailed_status = mdDIAGSYMP;
	} else {
		mdetailed_status = mdDIAGNOSED;
	};
	mother_diagnosed = TRUE;
};

void Child::Start()
{
	age = 0;
	if (RandUniform(16) > GenderChildFemaleProportion){
		gender = M;
	} else {
		gender = F;
	};
};

void Child::Finish()
{
	alive = FALSE;
};

track Child
	[actor_id % 500 == 0, GetReplicate() == 0 ]
{
	all_base_states,
	all_derived_states
};