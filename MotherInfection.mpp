//LABEL(MotherInfection, EN) Infection events for Mothers

/* NOTE(MotherInfection, EN)
	This module contains all the incidence functions for the mothers. Infections
	consists of two events. First a person must become infectible - this happens
	at age 14. Once a person becomes infectible, an infection event is scheduled.

	- Data requirements

	A table containing the probability for a person without HIV to acquire it
	in the year. The rates must be age, gender and time specific.

	- Implementation details

	Upon birth, the 'become infectible' event is scheduled 14 years into the future.
	Once a person becomes infectible, infection is scheduled reading off the current
	incidence for the mother and scheduling the event from an exponential distribution
	so that the probability of becoming infectedin the given year matches the
	incidence.

	If the mother does not become infected within one year, then infection event is rescheduled
	using the next years rate.

	Because the diagnosis transitions require access to the times at which the
	transitions from the infected state (either death or becoming symptomatic) will
	occur, those times are also calculated in this module and set as
	variables on the mother. The Mortality and Symptoms modules access those
	values to schedule the relevant events.
	
*/

range INCIDENCE_LIFE
{
	14, 59
};

/* NOTE (INCIDENCE_LIFE, EN)
    According to the ASSA model someone can only be infected
	between the ages of 14 and 60. Hence this range is needed
	to index the incidence rate table.
*/

parameters
{
	double IncidenceTable[GENDER][INCIDENCE_LIFE][MORT_TIME]; //EN Incidence Rates
	double IncidenceMotherMultiplier; //EN Incidence Multiplier
};

parameter_group Mother_Infection
{
	IncidenceTable, IncidenceMotherMultiplier 
};

/* NOTE (IncidenceTable, EN)
    The probability of becoming infected in a year. This table
	has dimensions for gender, current age and model year.
*/

/* NOTE (IncidenceMotherMultiplier, EN)
    Multiply the incidence rates by this before using them.
	Set to 1 for no change; Set to 0 to prevent all infections
*/


actor Mother            //EN Individual
{
	logical infectible = {FALSE};
	logical infected = {FALSE};
	event timeBecomeInfectibleEvent, BecomeInfectibleEvent;
	event timeInfectionEvent, InfectionEvent;
};

TIME Mother::timeBecomeInfectibleEvent()
{
	TIME t_event_time = TIME_INFINITE;
	if (infectible == FALSE){
			t_event_time = WAIT(14);
	};
	return(t_event_time);
};

void Mother::BecomeInfectibleEvent()
{
	infectible = TRUE;
};

double mInfectionTime(LIFE v_integer_age){
	// Life table only goes till age 91. Assume that mortality remains constant after age 91 at the value it was at age 91
	double t_event_time = pow(10,10);
	int capped_age;
	if (v_integer_age > 59){
		capped_age = 59 - 14;
	} else {
		capped_age = v_integer_age - 14;
	};

	int time_indx = 0;
	if (ModelTimeMode == PROGRESSING){
		time_indx = ModelTime + v_integer_age;
		if (time_indx > 40){
			time_indx = 40;
		};
	} else {
		time_indx = ModelTime;
	};

	double prob_infection = IncidenceTable[F][capped_age][time_indx] * IncidenceMotherMultiplier;

	// Draw a random waiting time to death from an exponential distribution
	// based on the probability of infection in the next year
	if (prob_infection == 0) {
	    return(t_event_time);
	}
	if (prob_infection >= 1) {
	  	t_event_time = 0;
	} else {
		t_event_time = -( log( RandUniform(2) ) / prob_infection);
	}
	return t_event_time;
}

double invWeibull_infect(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

double infectedMortalityTimeCalc(double y, double kappa, double lambda, double phi){
	TIME t_event_time = TIME_INFINITE;
	if (InfectedMortalityMotherMultiplier > 0){
		t_event_time = 0;
		while (t_event_time <= InfectedMortalityMotherImmortalityPeriod){
			t_event_time = invWeibull_infect(y, kappa, lambda, phi) / InfectedMortalityMotherMultiplier;
		};
	};
//	t_event_time = WAIT(t_event_time);
	return(t_event_time);
};

double infectedSymptomsTimeCalc(double inf_mortality_draw, double phi){
	TIME t_event_time = TIME_INFINITE;
	double symp_draw = RandUniform(6);
	double symp_par;
	symp_par = ((1 - SymptomsMotherCorrelation) * symp_draw) + (SymptomsMotherCorrelation * inf_mortality_draw);
	if (SymptomsMotherMultiplier > 0){
		t_event_time = invWeibull_infect(symp_par, SymptomsMotherShape, SymptomsMotherScale, phi) / SymptomsMotherMultiplier;
	};
//	t_event_time = WAIT(t_event_time);
	return(t_event_time);
};

TIME Mother::timeInfectionEvent()
{
	TIME t_event_time = TIME_INFINITE;
	if (mdeath_sched_status == mdsHEALTHY && infectible == TRUE){
			t_event_time = WAIT(mInfectionTime(integer_age));
	};
	return(t_event_time);
};

void Mother::InfectionEvent()
{
	vdp_age_at_infection = vdp_age_int; //Used for scheduling death from infection
	age_at_infection = age;
	mdeath_sched_status = mdsINFECTED;
	mdetailed_status = mdINFECTED;
	mchild_sched_status = cINFECTED;
	infected = TRUE;
    infected_death_time = age + infectedMortalityTimeCalc(inf_mortality_draw, InfectedMortalityMotherShape, InfectedMortalityMotherScale, InfectedMortalityMotherPhi[vdp_age_at_infection]);

	infected_symptoms_time = age + infectedSymptomsTimeCalc(inf_mortality_draw, InfectedMortalityMotherPhi[vdp_age_at_infection]);

	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Infect();
	}
};