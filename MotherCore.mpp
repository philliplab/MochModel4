//LABEL(MotherCore, EN) Core functionality of the Mother actor

/* NOTE(MotherCore, EN)
	This module contains the basic information which defines the Mother actor.

	Most of this information is used repeatedly by multiple modules.
*/

parameters 
{
	//EN Starting population size
	int		StartingPopulationSize;
	/* NOTE(StartingPopulationSize, EN)
		The population size may increase or decrease during the simulation.
	*/

	//EN Model Time
	int		ModelTime;
	/* NOTE(ModelTime, EN)
		Which time period to use as reference for incidence numbers and mortality?
		0 corresponds to 1985. Largest allowed value is 40.
	*/
};

classification GENDER
{
	F, M
};

range LIFE
{
	0, 100
};
/* NOTE(LIFE, EN)
    Actors are only allowed to live to age 100
*/

classification MDEATH_SCHED_STATE
{
	mdsHEALTHY,
	mdsINFECTED,
	mdsTREATED,
	mdsSTOPPED,
	mdsDEAD
};

classification MDETAILED_STATE
{
	mdHEALTHY,
	mdINFECTED,
	mdSYMPTOMS,
	mdDIAGNOSED,
	mdDIAGSYMP,
	mdTREATED,
	mdSTOPPED,
	mdDEAD
};

partition VAN_DER_PAAL_AGES
{
	13, 25, 35, 45
};

/* NOTE(VAN_DER_PAAL_AGES, EN)
    The survival curves presented in the Van der Paal article
	is grouped in to 5 different groups bounded by 13, 25, 35, 45, and Infinity
*/

range VAN_DER_PAAL_INDX //EN Van der Paal Age Index
{
	0,4
};

/* NOTE(VAN_DER_PAAL_INDX, EN)
    The survival curves presented in the Van der Paal article
	is grouped in to 5 different groups bounded by 13, 25, 35, 45, and Infinity
*/

actor_set Mother asAllMother; //EN All Mother actors

actor Mother            //EN Individual
{
	int model_version = {33};

	/*NOTE(Mother.model_version, EN)
	    By attaching the model_version to an actor and reporting it with a table
		I can be 100% sure that the model version reported in the output can only be
		produced by that version of the code (as opposed to just reading it from a dat file)
	*/

	double treatment_chance = {0};
	/* NOTE(Mother.treatment_chance, EN)
		The chance that a mother will access treatment once she is elible.
		Used in conjunction with the Treatment Coverage based Treatment schduler
	*/

	MDEATH_SCHED_STATE mdeath_sched_status = {mdsHEALTHY};
	MDETAILED_STATE mdetailed_status = {mdHEALTHY};

	REPORT_TIME report_time = { 0 };

	double infected_death_time = {0};
	double infected_symptoms_time = {0};

	// The states time and age are automatically defined by Modgen.
	// Model-specific labels and notes are supplied below.

	//LABEL(Mother.time, EN) Time
	/* NOTE(Mother.time, EN)
		Time is a continuous quantity in this model.
		A unit of time is a year.
	*/

	//LABEL(Mother.age, EN) Age
	/* NOTE(Mother.age, EN)
		Age is a continuous quantity in this model.
		A unit of age is a year.
	*/
	LIFE integer_age = self_scheduling_int(age);
	//EN Alive
	logical alive = {TRUE};
	/*NOTE(Mother.alive, EN)
		Set to TRUE when the actor starts, and to FALSE just before the actor finishes.
		Since the numeric value of TRUE is 1 and FALSE is 0, this variable
		can also be used to count actors in tables.
	*/

	double inf_mortality_draw = {-1}; //EN Random Draw for Mortality after Infection
	/* NOTE (Mother.inf_mortality_draw, EN)
		When a mother is created, her draw for mortality from the infected
		state is immediately drawn and is placed on the Mother as a state variable.
		This allows other events to also access this draw so that other events can be
		correlated with this event
	*/

	VAN_DER_PAAL_INDX vdp_age_int = self_scheduling_split(age, VAN_DER_PAAL_AGES); //EN Van Der Paal Age Category
	/* Note (Mother.vdp_age_int, EN)
		Survival Curves were fitted to data in the Van Der Paal Article. To use those curves, 
		age must be modified into those categories.
	*/

	VAN_DER_PAAL_INDX vdp_age_at_infection = {4}; //EN Van Der Paal Age Category at Infection
	/* NOTE (Mother.vdp_age_at_infection, EN)
		To schedule death from the infected state, the mother's age at infection (in Van Der Paal Category) must be known.
	*/

	VAN_DER_PAAL_INDX vdp_age_at_symptoms = {4}; //EN Van Der Paal Age Category at Syptoms
	/* NOTE (Mother.vdp_age_at_symptoms, EN)
		For reporting purposes only
	*/
	
	logical showing_symptoms = {FALSE}; //EN Showing Symptoms



	//LABEL(Mother.Start, EN) Starts the actor
	void Start();

	//LABEL(Mother.Finish, EN) Finishes the actor
	void Finish();
};

/*NOTE(Mother.Start, EN)
	The Start function initializes actor variables before simulation
	of the actor commences.
*/
void Mother::Start()
{
	// Modgen initializes all actor variables
	// before the code in this function is executed.

	age = 0;
	time = 0;

	inf_mortality_draw = RandUniform(3);
	treatment_chance = RandUniform(12);

	// After the code in this function is executed,
	// Modgen initializes events and tables for the actor.
	// Modgen also outputs starting values to the tracking file if requested.
}

/*NOTE(Mother.Finish, EN)
	The Finish function terminates the simulation of an actor.
*/
void Mother::Finish()
{
};

track Mother
	[actor_id % 100 == 0, GetReplicate() == 0 ]
{
	all_base_states,
	all_derived_states
};