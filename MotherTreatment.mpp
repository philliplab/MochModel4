
parameters
{
	double TreatmentMotherShape; //EN Eligilble Mother Time to Treatment Curve Shape - kappa
	double TreatmentMotherScale; //EN Eligilble Mother Time to Treatment Curve Scale - lambda
	double TreatmentMotherMultiplier; //EN A multiplier to tweak the rate at which mothers develop symptoms
	double TreatmentTransitionMotherSwitch; //EN A switch allowing to choose which transition to use for treatment
	double TreatmentCoverageMother[MORT_TIME]; //EN The treatment times over the model time
};

/* NOTE (TreatmentCoverageMother, EN)
	The treatment coverage for eligible mothers. 
*/

/* NOTE (TreatmentTransitionMotherSwitch, EN)
	This switch allows one to choose between scheduling access to treatment based on a weibull 
	curve from the time since eligibility or based on the coverage rate.
	Setting this value to zero will use the weibull rate.
	Setting this value to one will use the coverage based approach.
*/

/* NOTE (TreatmentMotherShape, EN)
    The shape parameter for the Infected mother's time-to-treatment curve
*/

/* NOTE (TreatmentMotherScale, EN)
   The scale parameter for the Infected mother's time-to-treatment curve
*/

/* NOTE (TreatmentMotherMultiplier, EN)
	The time to treatment is divided by this number. Thus if you want to switch off treatment, set it to zero
	so that you have to wait till inifinity to develop treatment. If you want to double treatment, set it to
	2 so that time to treatment is halved.
*/

double InvWeibull3(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};


actor Mother
{
	event timeTreatmentEvent, TreatmentEvent;
};

TIME Mother::timeTreatmentEvent()
{
	TIME t_event_time = TIME_INFINITE;
	if (mdetailed_status == mdDIAGSYMP)
	{
		if (TreatmentTransitionMotherSwitch == 0)
		{
			if (TreatmentMotherMultiplier > 0){
				t_event_time = InvWeibull3(RandUniform(7), TreatmentMotherShape, TreatmentMotherScale, 1) / TreatmentMotherMultiplier;
			};
		};
		if (TreatmentTransitionMotherSwitch == 1){
			t_event_time = 1;
		};
	};
	t_event_time = WAIT(t_event_time);
	return (t_event_time);
};

void Mother::TreatmentEvent()
{
	mdeath_sched_status = mdsTREATED;
	mdetailed_status = mdTREATED;
	showing_symptoms = FALSE;
/*	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Treat();
	}*/
};